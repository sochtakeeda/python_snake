# Mini-project #6 - Blackjack - executable link: http://www.codeskulptor.org/#user43_QPYCqDpMCO_9.py

"""Blackjack is a simple, popular card game that is played in many casinos. Cards in Blackjack have the following values: an ace may be 
valued as either 1 or 11 (player's choice), face cards (kings, queens, jacks) are valued at 10 and the value of the remaining cards 
corresponds to their number. During a round of Blackjack, the players plays against a dealer with the goal of building a hand 
(a collection of cards) whose cards have a total value that is higher than the value of the dealer's hand, but not over 21. 
(A round of Blackjack is also sometimes referred to as a hand.)

The game logic in this **simplified version** of Blackjack is as follows. The player and the dealer are each dealt two cards initially with 
one of the dealer's cards being dealt faced down (his hole card). The player may then ask for the dealer to repeatedly "hit" his hand by 
dealing him another card. If, at any point, the value of the player's hand exceeds 21, the player is "busted" and loses immediately. At 
any point prior to busting, the player may "stand" and the dealer will then hit his hand until the value of his hand is 17 or more. (For 
the dealer, aces count as 11 unless it causes the dealer's hand to bust). If the dealer busts, the player wins. Otherwise, the player and 
dealer then compare the values of their hands and the hand with the higher value wins. The dealer wins ties in our version."""



import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# global variables
in_play = False
outcome = ""
player = dealer = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)

        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.handlist = []

    def __str__(self):
        # return a string representation of a hand
        handstring = ""
        for i in self.handlist:
            handstring += str(i) + " "
        return handstring

    def add_card(self, card):
        # add a card object to a hand
        self.handlist.append(card)

    def get_value(self):        
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand
        hand_value = 0
        aces = 0
        for i in self.handlist:
            hand_value += VALUES[i.get_rank()]
            if (i.rank == 'A'):
                aces += 1
        if (aces == 0):
            return hand_value
        elif (hand_value + 10) <= 21:
            return hand_value + 10
        else: return hand_value
   
    def draw(self, canvas, pos):        
        for i in self.handlist:   
            i.draw(canvas, pos)
            pos [0] += 100

            
# define deck class 
class Deck:
    def __init__(self):
        global decklist
        # create a Deck object
        decklist = []
        for i in SUITS:
            for j in RANKS:
                x = Card(i,j)
                decklist.append(x)                

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(decklist)
        
    def deal_card(self):
        # deal a card object from the deck
        return decklist.pop(0)
    
    def __str__(self):
        # return a string representing the deck
        deckstring = "Deck contains "
        for i in decklist:
            deckstring += str(i) + " "
        return deckstring


#define event handlers for buttons
def deal():
    global outcome, in_play, the_deck, my_hand, dealer_hand, dealer
    
    the_deck = Deck()
    the_deck.shuffle()
    my_hand = Hand()
    dealer_hand = Hand()
    outcome = "Hit or Stand?"
    
    my_hand.add_card(the_deck.deal_card())  
    my_hand.add_card(the_deck.deal_card())
    
    dealer_hand.add_card(the_deck.deal_card())
    dealer_hand.add_card(the_deck.deal_card())
    
    if in_play:
        dealer += 1
        outcome = 'Don\'t cheat!'

    in_play = True

def hit():
    global in_play, outcome, dealer
    # if the hand is in play, hit the player   
    # if busted, assign a message to outcome, update in_play and score    
    if in_play:
        if my_hand.get_value() <= 21:
            my_hand.add_card(the_deck.deal_card())  
            if my_hand.get_value() > 21:
                outcome = 'You\'re busted!'
                dealer += 1
                in_play = False
    else:
        outcome = 'Game over. Deal again bruh..'
        in_play = False        
        
        
def stand():
    global in_play, outcome, dealer, player
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    # assign a message to outcome, update in_play and score    
    if in_play:
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card(the_deck.deal_card())
        if dealer_hand.get_value() > 21:
            outcome = 'Dealer busted, You win!'
            player += 1
            in_play = False
        elif my_hand.get_value() <= dealer_hand.get_value():
            outcome = 'Dealer wins!'
            dealer =+ 1
            in_play = False
        else: 
            outcome = 'You win!'
            player += 1
            in_play = False
    else: 
        outcome = 'Game over. Deal again bruv..'
        in_play = False

        
# draw handler    
def draw(canvas):    
    canvas.draw_text('B l a c k   a c k', (170, 70), 45, 'black')
    canvas.draw_text('J', (325, 86), 55, 'black')
    canvas.draw_polygon([(155, 25), (455, 25), (455, 97), (155, 97)], 5, 'black') 
    canvas.draw_text("Player   Dealer", (240, 160), 30, 'black')
    canvas.draw_text(str(player), (270, 205), 35, 'black')
    canvas.draw_text(str(dealer), (370, 205), 35, 'black')
    dealer_hand.draw(canvas, [100, 240])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [136, 288], CARD_BACK_SIZE)
    canvas.draw_text(outcome, (240, 380), 30, 'black')
    my_hand.draw(canvas, [100, 400])

    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
deal()
frame.start()
