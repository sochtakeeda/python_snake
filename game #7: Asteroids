
executable link: http://www.codeskulptor.org/#user43_7W8bETvrPv_7.py

# program template for Spaceship
import simplegui
import math
import random


# globals for user interface
WIDTH = 800
HEIGHT = 600

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
#soundtrack2 = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
soundtrack2 = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")
soundtrack = simplegui.load_sound("https://www.dropbox.com/s/zjoxrubvqkli2ys/feels.mp3?dl=1")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
soundtrack.set_volume(0.6)
soundtrack2.set_volume(0.6)
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# at http://www.filmcomposer.nl
# soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

def process_sprite_group(canvas, set_a):
    for sprite in set(set_a):
        if sprite.update():
            set_a.remove(sprite)
        else:
            sprite.update()
            sprite.draw(canvas)

def group_collide(group, other_obj):
    for sprite in set(group):
        if sprite.collide(other_obj):
            collision = Sprite(sprite.pos, [0, 0], 0, 0, explosion_image, explosion_info, explosion_sound)
            explosion_group.add(collision)
            group.remove(sprite)
            return True
    return False

def group_group_collide(mgroup, rgroup):
    count = 0
    for sprite in set(mgroup):
        if group_collide(rgroup, sprite):
            count += 1
            mgroup.discard(sprite)
    return count

# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.sound = ship_thrust_sound
        self.acc = [0, 0]
        self.sound.pause()
                
    def draw(self,canvas):
        
        if self.thrust:
            self.image_center = [135,45]
        else: self.image_center = [45,45]
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        # orientation 
        self.angle += self.angle_vel
        self.acc = (angle_to_vector(self.angle))
        
        # thrust and velocity 
        if self.thrust: 
            self.vel = (self.vel[0] + 0.2 * self.acc[0], self.vel[1] + 0.2 * self.acc[1])   
        
        # friction
        self.vel = [0.98 * self.vel[0], 0.98 * self.vel[1]] 
                
    def thruster(self):
        if self.thrust:
            self.thrust = False
            self.sound.rewind()         
        else: 
            self.thrust = True
            self.sound.play()
            
    def shoot(self):
        global missile_group
        forward_vector = angle_to_vector(self.angle)
        pos = [self.pos[0] + self.radius * forward_vector[0], self.pos[1] + self.radius * forward_vector[1]]
        vel = [self.vel[0] + 5 * forward_vector[0], self.vel[1] + 5 * forward_vector[1]]
        a_missile = Sprite(pos, vel, 0, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
        
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas): 
        if self.animated:            
            index = self.age % self.lifespan
            #print [self.image_center[0] + index * self.image_size[0], self.image_center[1]]
            canvas.draw_image(self.image, [self.image_center[0] + index * self.image_size[0], self.image_center[1] ] , self.image_size,
                              self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                              self.pos, self.image_size, self.angle)
  
    def update(self):
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        # update angle
        self.angle += self.angle_vel
       
            
        if self.lifespan:
            self.age += 1
            if self.age >= self.lifespan:
                return True
        return False  
    
        
            
    def collide(self, other_obj):
        radius_sum = self.radius + other_obj.radius
        center_dist = dist(self.pos, other_obj.pos)
        if center_dist <= radius_sum:
            return True
        return False
        
          
    
# event handlers
def click(pos):
    global started, timer, soundtrack
    if not started:
        started = True
        timer = simplegui.create_timer(1000.0, rock_spawner)
        timer.start()
                
def keydown(key):
    global my_ship
    if not started: return
    if simplegui.KEY_MAP['up'] == key:
        my_ship.thruster()
    elif simplegui.KEY_MAP['left'] == key:
        my_ship.angle_vel -= 0.04
    elif simplegui.KEY_MAP['right'] == key:
        my_ship.angle_vel += 0.04 
    elif simplegui.KEY_MAP['space'] == key:
        my_ship.shoot()

def keyup(key):
    global my_ship
    if not started: return
    if simplegui.KEY_MAP['up'] == key:
        my_ship.thruster()  
    elif simplegui.KEY_MAP['left'] == key:
        my_ship.angle_vel += 0.04
    elif simplegui.KEY_MAP['right'] == key:
        my_ship.angle_vel -= 0.04
    
# timer handler that spawns a rock    
def rock_spawner():
    global rock_group
    rock_pos = [random.randrange(0, WIDTH+1), random.randrange(0, HEIGHT+1)]
    if dist(rock_pos, my_ship.pos) <= (asteroid_info.get_radius() + ship_info.get_radius() + 10):
        return
    rock_vel = [random.random() * 0.6 - 0.3, random.random() * 0.6 - 0.3]
    rock_angvel = random.random() * 0.2 - 0.1
    a_rock = Sprite(rock_pos, rock_vel, 0, rock_angvel, asteroid_image, asteroid_info) 
    rock_group.add(a_rock)
    if len(rock_group) > 12:
        rock_group.pop()

def newgame():
    global score, lives, time, started, my_ship, rock_group, missile_group, soundtrack, timer, explosion_group
    score = 0
    lives = 3
    time = 0
    started = False
    soundtrack.rewind()
    soundtrack.play()
    timer.stop()
    # initialize ship and two sprite groups
    my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
    rock_group = Sprite([WIDTH / 3, HEIGHT / 3], [random.randrange(-8,8), random.randrange(-8,8)], random.randrange(0,6)/10, 0.04, asteroid_image, asteroid_info)
    missile_group = Sprite([WIDTH * 3, HEIGHT * 3], [0, 0], 0, 0, missile_image, missile_info, missile_sound)
    rock_group = set([])
    missile_group = set([])
    explosion_group = set([])
        
def draw(canvas):
    global time, started, lives, score, my_ship, rock_group, missile_group, timer, soundtrack, soundtrack2
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship and sprites
    if started: 
        soundtrack.pause()
        soundtrack2.play()
        process_sprite_group(canvas, rock_group)
        process_sprite_group(canvas, missile_group)
        process_sprite_group(canvas, explosion_group)

        my_ship.draw(canvas)
        my_ship.update()

        score += group_group_collide(missile_group, rock_group)

        if group_collide(rock_group, my_ship):
            lives -= 1

    canvas.draw_text("Score", [50, 50], 25, "white")
    canvas.draw_text(str(score), [75, 80], 25, "white")
    canvas.draw_text("Lives", [680, 50], 25, "white")
    canvas.draw_text(str(lives), [700, 80], 25, "white")
    
    if lives <= 0:
        newgame()
        soundtrack2.pause()
        soundtrack2.rewind()
       
    if not started:
        soundtrack.play()
        canvas.draw_image(splash_image, splash_info.get_center(), splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], splash_info.get_size())
                   
# initialize frame

frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# register handlers
frame.set_draw_handler(draw)
frame.set_mouseclick_handler(click)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

timer = simplegui.create_timer(1000.0, rock_spawner)
newgame()
# get things rolling
frame.start()
