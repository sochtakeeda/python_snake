
# a version of the 1972 game Pong https://en.wikipedia.org/wiki/Pong 
# executable link: http://www.codeskulptor.org/#user43_hRdODjnoYQ_14.py

# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

ball_pos = [0,0]
ball_vel = [0,0]
paddle1_pos = HEIGHT / 2
paddle2_pos = HEIGHT / 2
paddle1_vel = 0
paddle2_vel = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left

def spawn_ball(direction):
    """spawns ball in the middle of table then assigns it a direction and velocity"""
    
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    if (direction == "LEFT"):
        ball_vel[0] = -random.randrange(120, 240)/60
        ball_vel[1] = -random.randrange(60, 180)/60
    elif (direction == "RIGHT"):
        ball_vel[0] = random.randrange(120, 240)/60
        ball_vel[1] = -random.randrange(60, 180)/60


# define event handlers
def new_game():
    """resets score and starts a new game"""
    
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(random.choice(["RIGHT","LEFT"]))
    score1 = score2 = 0

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
      
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # collision and reflection
    # left gutter collision
    if (ball_pos[0] <= BALL_RADIUS + PAD_WIDTH):   
        if (ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT and ball_pos[1] <= paddle1_pos + HALF_PAD_HEIGHT):
            ball_vel[0] = -(ball_vel[0] + ball_vel[0] * 0.1) # increase 10% velocity if ball strikes paddle
        else:
            score2 += 1
            spawn_ball("RIGHT")
            
    # right gutter collision
    elif (ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH):
        if (ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT and ball_pos[1] <= paddle2_pos + HALF_PAD_HEIGHT):
            ball_vel[0] = -(ball_vel[0] + ball_vel[0] * 0.1) 
        else: 
            score1 += 1
            spawn_ball("LEFT")
            
    # top and bottom collision
    elif (ball_pos[1] <= BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]
    elif (ball_pos[1] >= HEIGHT - BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]
            
    # draw ball
    canvas.draw_circle(ball_pos, 20, 1, 'white', 'white')
    
    # update paddle's vertical position, keep paddle on the screen
    if (paddle1_pos + paddle1_vel >= HALF_PAD_HEIGHT and paddle1_pos + paddle1_vel <= HEIGHT - HALF_PAD_HEIGHT):
        paddle1_pos += paddle1_vel
    if (paddle2_pos + paddle2_vel >= HALF_PAD_HEIGHT and paddle2_pos + paddle2_vel <= HEIGHT - HALF_PAD_HEIGHT):
        paddle2_pos += paddle2_vel   
    
    # draw paddles
    x = paddle1_pos - HALF_PAD_HEIGHT
    y = paddle1_pos + HALF_PAD_HEIGHT
    x2 = paddle2_pos - HALF_PAD_HEIGHT
    y2 = paddle2_pos + HALF_PAD_HEIGHT
    canvas.draw_polygon([[0, x], [PAD_WIDTH, x], [PAD_WIDTH, y], [0, y]], 1, 'white', 'white')
    canvas.draw_polygon([[WIDTH-PAD_WIDTH, x2], [WIDTH, x2], [WIDTH,y2] , [WIDTH-PAD_WIDTH, y2]], 1, 'white', 'white')   
    
    # draw scores
    canvas.draw_text(str(score1), (150,50), 40, 'white')
    canvas.draw_text(str(score2), (450, 50), 40, 'white')
        
def keydown(key):
    speed = 3
    global paddle1_vel, paddle2_vel
    if (key == simplegui.KEY_MAP['w']):
        paddle1_vel -= speed
    elif (key == simplegui.KEY_MAP['s']):
        paddle1_vel += speed
    elif (key == simplegui.KEY_MAP['up']):
        paddle2_vel -= speed
    elif (key == simplegui.KEY_MAP['down']):
        paddle2_vel += speed
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if (key == simplegui.KEY_MAP['w']):
        paddle1_vel = 0
    elif (key == simplegui.KEY_MAP['s']):
        paddle1_vel = 0
    elif (key == simplegui.KEY_MAP['up']):
        paddle2_vel = 0
    elif (key == simplegui.KEY_MAP['down']):
        paddle2_vel = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
label1 = frame.add_button('Restart', new_game, 200)


# start frame
new_game()
frame.start()

